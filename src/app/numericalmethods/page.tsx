'use client';
import { BlockMath, InlineMath } from 'react-katex';
import 'katex/dist/katex.min.css';
import StandardLayout from "@/layouts/standardLayout";
import CodeBlock from './CodeBlock';
import D3InterpolationPlot from './D3InterpolationPlot';

export default function NumericalMethodsPage() {
  const main = (
    <div>
      <h1>Numerical Methods</h1>
      <p>This page is notes I have taken from An Introduction to Computational Physics by Tao Pang.</p>
      
      {/* Chapter 2 */}
      <h2>Chapter 2: Approximation of a function</h2>
      <h3>2.1 Interpolation</h3>
        <p>Wikipedia: <a href="https://en.wikipedia.org/wiki/Interpolation">Interpolation</a></p>
        <p>Interpolation is the process of estimating unknown values that fall within the range of known data points.</p>
      <h4>Linear Interpolation</h4>
        <p>Linear interpolation assumes the data follows a linear function between each data point.</p>
        <table style={{ width: '100%' }}>
            <thead>
                <tr>
                    <th>Equation</th>
                    <th>Error</th>
                    <th>Max Error</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><BlockMath math="f(x) = f_i + \frac{x - x_i}{x_{i+1} - x_i} (f_{i+1} - f_i) + \Delta f(x)" /></td>
                    <td><BlockMath math="\Delta f(x) = \frac{f''(x)}{2} (x-x_i)(x-x_{i+1})" /></td>
                    <td><BlockMath math="|\Delta f(x)| \leq \frac{\text{max}[|f''(x)|]}{8} (x_{i+1}-x_i)^2" /></td>
                </tr>
            </tbody>
        </table>
        <div style={{ width: '100%', display: 'flex' }}>
            <div style={{ flex: 1, order: 0 }}>
            <CodeBlock codeMap={{
                Python: "def linearInterpolation(xn, fn, x):\n\txn = xn.sorted()\n\treturn 0",
                TypeScript: "function linearInterpolation(x: number, x_i: number, x_i1: number, f_i: number, f_i1: number): number",
            }} />
            </div>
            <div style={{ flex: 1, order: 1 }}>
            <D3InterpolationPlot />
            </div>
        </div>
      <h4>Lagrange Interpolation</h4>
        <p>Wikipedia: <a href="https://en.wikipedia.org/wiki/Lagrange_polynomial">Lagrange polynomial</a></p>
        <p>Lagrange interpolation fits a polynomial that passes through all the data points and has a degree less than or equal to the number of data points.</p>
        <table style={{ width: '100%' }}>
            <thead>
                <tr>
                    <th>Equation</th>
                    <th>Error</th>
                    <th>Max Error</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <BlockMath math="f(x) = \sum_{i=0}^n f_i p_{nj} + \Delta f(x)" />
                        <BlockMath math="p_{nj} = \prod_{i\neq j}^n \frac{x-x_j}{x_i-x_j}" />
                    </td>
                    <td><BlockMath math="\Delta f(x) = \frac{f^{(n+1)}(x)}{(n+1)!} \prod_{i=0}^n(x-x_i)" /></td>
                    <td><BlockMath math="|\Delta f(x)| \leq \frac{\text{max}[|f^{(n+1)}(x)|]}{4(n+1)} h^{n+1}" /></td>
                </tr>
            </tbody>
        </table>
      <h3>2.2 Least-squares approximation</h3>
      <h3>2.4 Spline approximation</h3>
      <h3>2.5 Random-number generators</h3>
      <h4>Uniform random-number generators</h4>
        <p>Good uniform random-number generators have three characteristics:</p>
        <ol>
            <li>Long period: This should be close to the range of numbers being generated. For a 32-bit integer the range should be about <InlineMath math="2^{32}-1"/></li>
            <li>Independence: The numbers should be statistically independent. If you have a set of random numbers <InlineMath math="(x_0,x_1,\cdots,x_n)"/> and plot them like <InlineMath math="(x_i,x_{i+1})"/>, there should be no patterns and the correlation should be close to 0.</li>
            <li>Fast: In practice we need a lot of random numbers, so a good random-number generator should not be a computational bottleneck.</li>
        </ol>
      <h4>Linear congruent scheme</h4>
        Defined below, <InlineMath math="a"/>, <InlineMath math="b"/>, and <InlineMath math="c"/> are called magic numbers. Their values determine the quality of the generator. A common choice is <InlineMath math="a=7^5,\ b=0,\ c=2^{32}-1"/>. The initial value <InlineMath math="x_0"/> is called the seed. The next value is generated by the equation:
        <BlockMath math="x_{i+1} = (a x_i + b) \mod c"/>
      <h2>Chapter 3: Numerical calculus</h2>
        <h4>Taylor series</h4>
        <p>Wikipedia: <a href="https://en.wikipedia.org/wiki/Taylor_series">Taylor series</a></p>
        <p>A Taylor series is used as an approximation of a function around a point <InlineMath math="a"/> and is defined as a sum of terms derived from the derivatives at <InlineMath math="a"/>.</p>
        <BlockMath math="f(x) = f(x) + f'(a)(x-a) + \frac{f''(a)}{n!} (x-a)^2 + \cdots + \frac{f^{(n)}(a)}{n!} (x-a)^n = \sum_{n=0}^\infty \frac{f^{(n)}(a)}{n!} (x-a)^n" />
      <h3>3.1 Numerical differentiation</h3>
        <p>Wikipedia: <a href="https://en.wikipedia.org/wiki/Numerical_differentiation">Numerical differentiation</a></p>
        <h4>First-order derivatives</h4>
            <table style={{ width: '100%' }}>
                <thead>
                    <tr>
                        <th></th>
                        <th>uniform <InlineMath math="h"/></th>
                        <th>non-uniform <InlineMath math="h"/></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th>two-point formula</th>
                        <td><BlockMath math="f'_i = \frac{f_{i+1}-f_i}{h} + O(h)" /></td>
                        <td><BlockMath math="f'_i = \frac{f_{i+1}-f_i}{h} + O(h)" /></td>
                    </tr>
                    <tr>
                        <th>three-point formula</th>
                        <td><BlockMath math="f'_i = \frac{f_{i+1}-f_{i-1}}{2h} + O(h^2)" /></td>
                        <td><BlockMath math="
                            f'_i = \frac{
                                h^2_{i-1}f_{i+1} + (h^2_i - h^2_{i-1})f_i + h^2_{i}f_{i-1}
                            }{
                                h_ih_{i-1}(h_i + h_{i-1})
                            } + O(h^2)" /></td>
                    </tr>
                    <tr>
                        <th>five-point formula</th>
                        <td><BlockMath math="f'_i = \frac{1}{12h} (f_{i-2}-8f_{i-1}+8f_{i+1}-f_{i+2}) + O(h^4)" /></td>
                        <td></td>
                    </tr>
                </tbody>
            </table>
        <h4>Second-order derivatives</h4>
            <table style={{ width: '100%' }}>
                <thead>
                    <tr>
                        <th></th>
                        <th>uniform <InlineMath math="h"/></th>
                        <th>non-uniform <InlineMath math="h"/></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th>three-point formula</th>
                        <td><BlockMath math="f''_i = \frac{f_{i+1}-2f_i+f_{i-1}}{h^2} + O(h^2)" /></td>
                        <td><BlockMath math="
                            f''_i = \frac{
                                2[h_{i-1}f_{i+1} - (h_i + h_{i-1})f_i + h_if_{i-1}]
                            }{
                                h_ih_{i+1}(h_i + h_{i-1})
                            } + O(h)" /></td>
                    </tr>
                    <tr>
                        <th>five-point formula</th>
                        <td><BlockMath math="f'_i = \frac{1}{12h^2} (-f_{i-2}+16f_{i-1}-30f_i-16f_{i+1}-f_{i+2}) + O(h^4)" /></td>
                        <td></td>
                    </tr>
                </tbody>
            </table>
        <p>Using higher order point formulas result in higher accuracy at a computational expense.</p>
        <h4>Corrections if <InlineMath math="f(x)"/> is continuous and <InlineMath math="h"/> is uniform</h4>
            <table style={{ width: '100%' }}>
                <thead>
                    <tr>
                        <th>first-order</th>
                        <th>second-order</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><BlockMath math="\Delta_1(h) = \frac{f(x+h) - f(x-h)}{2h}" /></td>
                        <td><BlockMath math="\Delta_2(h) = \frac{f(x+h) - 2f(x) + f(x-h)}{h^2}" /></td>
                    </tr>
                </tbody>
            </table>
      <h3>3.2 Numerical integration</h3>
      <h3>3.3 Roots of an equation</h3>
      <h3>3.4 Extremes of a function</h3>
      <h3>3.5 Classical scattering</h3>
    </div>
  );

  return StandardLayout({ title: "Numerical Methods", main });
}